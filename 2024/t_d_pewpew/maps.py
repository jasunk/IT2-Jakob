import random, copy

#_ = bakke
#1 = vegg
#2 = Exit
#3 = entrance
_ = 0

map1 = [
    [1,1,1,1,1,1,1,1,1,1],
    [1,_,_,_,_,_,_,_,_,1],
    [1,_,_,_,_,_,_,_,_,1],
    [1,_,_,1,1,_,_,_,_,1],
    [1,_,_,1,1,_,_,_,_,_],
    [1,_,_,_,_,_,_,_,_,_],
    [1,_,_,_,_,_,_,_,_,1],
    [1,_,_,_,_,_,_,_,_,1],
    [1,_,_,_,_,_,_,_,_,1],
    [1,1,1,1,1,1,1,1,1,1]
]

emptyMap = [
    [1,1,1,1,1,1,1,1,1,1,1,1],
    [1,1,1,1,1,1,1,1,1,1,1,1],
    [1,1,0,0,0,0,0,0,0,0,1,1],
    [1,1,0,0,0,0,0,0,0,0,1,1],
    [1,1,0,0,0,0,0,0,0,0,1,1],
    [1,1,0,0,0,0,0,0,0,0,1,1],
    [1,1,0,0,0,0,0,0,0,0,1,1],
    [1,1,0,0,0,0,0,0,0,0,1,1],
    [1,1,0,0,0,0,0,0,0,0,1,1],
    [1,1,0,0,0,0,0,0,0,0,1,1],
    [1,1,1,1,1,1,1,1,1,1,1,1],
    [1,1,1,1,1,1,1,1,1,1,1,1]

]
squareMap = [
    [1,1,1,1,1,1,1,1,1,1,1,1],
    [1,1,1,1,1,1,1,1,1,1,1,1],
    [1,1,0,0,0,0,0,0,0,0,1,1],
    [1,1,0,0,0,0,0,0,0,0,1,1],
    [1,1,0,0,0,0,0,0,0,0,1,1],
    [1,1,0,0,0,1,1,0,0,0,1,1],
    [1,1,0,0,0,1,1,0,0,0,1,1],
    [1,1,0,0,0,0,0,0,0,0,1,1],
    [1,1,0,0,0,0,0,0,0,0,1,1],
    [1,1,0,0,0,0,0,0,0,0,1,1],
    [1,1,1,1,1,1,1,1,1,1,1,1],
    [1,1,1,1,1,1,1,1,1,1,1,1]

]
extMap = [
    [1,1,1,1,1,1,1,1,1,1,1,1],
    [1,1,1,1,1,1,1,1,1,1,1,1],
    [1,1,0,0,1,0,0,1,0,0,1,1],
    [1,1,0,0,0,0,0,0,0,0,1,1],
    [1,1,1,0,0,0,0,0,0,1,1,1],
    [1,1,0,0,0,0,0,0,0,0,1,1],
    [1,1,0,0,0,0,0,0,0,0,1,1],
    [1,1,1,0,0,0,0,0,0,1,1,1],
    [1,1,0,0,0,0,0,0,0,0,1,1],
    [1,1,0,0,1,0,0,1,0,0,1,1],
    [1,1,1,1,1,1,1,1,1,1,1,1],
    [1,1,1,1,1,1,1,1,1,1,1,1]

]
dottedMap1 = [
    [1,1,1,1,1,1,1,1,1,1,1,1],
    [1,1,1,1,1,1,1,1,1,1,1,1],
    [1,1,0,0,0,0,0,1,0,0,1,1],
    [1,1,0,1,0,0,0,0,0,0,1,1],
    [1,1,0,0,0,0,0,0,1,0,1,1],
    [1,1,0,0,1,0,1,0,0,0,1,1],
    [1,1,0,0,0,0,0,1,0,0,1,1],
    [1,1,0,1,0,0,0,0,0,0,1,1],
    [1,1,0,0,0,0,1,0,0,0,1,1],
    [1,1,1,0,0,0,0,0,0,0,1,1],
    [1,1,1,1,1,1,1,1,1,1,1,1],
    [1,1,1,1,1,1,1,1,1,1,1,1]

]
dottedMap2 = [
    [1,1,1,1,1,1,1,1,1,1,1,1],
    [1,1,1,1,1,1,1,1,1,1,1,1],
    [1,1,0,0,0,0,0,0,1,0,1,1],
    [1,1,0,1,0,0,0,1,0,0,1,1],
    [1,1,0,0,0,0,0,0,0,0,1,1],
    [1,1,0,0,1,0,0,0,0,0,1,1],
    [1,1,0,0,0,0,0,1,0,0,1,1],
    [1,1,0,0,1,0,0,0,0,0,1,1],
    [1,1,0,0,0,0,1,0,0,0,1,1],
    [1,1,0,0,0,0,0,0,0,0,1,1],
    [1,1,1,1,1,1,1,1,1,1,1,1],
    [1,1,1,1,1,1,1,1,1,1,1,1]

]
c1 = [
    [1,1,1,1,1,1,1,1,1,1,1,1],
    [1,1,1,1,1,1,1,1,1,1,1,1],
    [1,1,1,0,0,0,0,0,0,1,1,1],
    [1,1,0,0,0,0,0,0,0,0,1,1],
    [1,1,0,0,0,0,0,0,0,0,1,1],
    [1,1,0,0,0,0,0,0,0,0,1,1],
    [1,1,0,0,0,0,0,0,0,0,1,1],
    [1,1,0,0,0,0,0,0,0,0,1,1],
    [1,1,0,0,0,0,0,0,0,0,1,1],
    [1,1,1,0,0,0,0,0,0,1,1,1],
    [1,1,1,1,1,1,1,1,1,1,1,1],
    [1,1,1,1,1,1,1,1,1,1,1,1]

]
c2 = [
    [1,1,1,1,1,1,1,1,1,1,1,1],
    [1,1,1,1,1,1,1,1,1,1,1,1],
    [1,1,1,1,0,0,0,0,1,1,1,1],
    [1,1,1,0,0,0,0,0,0,1,1,1],
    [1,1,0,0,0,0,0,0,0,0,1,1],
    [1,1,0,0,0,0,0,0,0,0,1,1],
    [1,1,0,0,0,0,0,0,0,0,1,1],
    [1,1,0,0,0,0,0,0,0,0,1,1],
    [1,1,1,0,0,0,0,0,0,1,1,1],
    [1,1,1,1,0,0,0,0,1,1,1,1],
    [1,1,1,1,1,1,1,1,1,1,1,1],
    [1,1,1,1,1,1,1,1,1,1,1,1]

]
c3 = [
    [1,1,1,1,1,1,1,1,1,1,1,1],
    [1,1,1,1,1,1,1,1,1,1,1,1],
    [1,1,1,1,1,0,0,1,1,1,1,1],
    [1,1,1,1,0,0,0,0,1,1,1,1],
    [1,1,1,0,0,0,0,0,0,1,1,1],
    [1,1,0,0,0,0,0,0,0,0,1,1],
    [1,1,0,0,0,0,0,0,0,0,1,1],
    [1,1,1,0,0,0,0,0,0,1,1,1],
    [1,1,1,1,0,0,0,0,1,1,1,1],
    [1,1,1,1,1,0,0,1,1,1,1,1],
    [1,1,1,1,1,1,1,1,1,1,1,1],
    [1,1,1,1,1,1,1,1,1,1,1,1]

]

def randomMap():

    return random.choice([emptyMap, extMap, squareMap, dottedMap1, dottedMap2,c1,c2,c3])


def changeEntranceExit(map, ent, ext):

    tempMap = copy.deepcopy(map)

    if ent == "Right":
        for row in tempMap:
            row[len(row)-1]=1
        tempMap[5][10], tempMap[6][10] = 0, 0
    if ent == "Left":
        for row in tempMap:
            row[0]=1
        tempMap[5][1], tempMap[6][1] = 0, 0
    if ent == "Top":
        tempMap[0][5], tempMap[0][6] = 1,1
        tempMap[1][5], tempMap[1][6] = 0, 0
    if ent == "Bottom":
        tempMap[11][5], tempMap[11][6] = 2,2
        tempMap[10][5], tempMap[10][6] = 0, 0

    if ext == "Right":
        for row in tempMap:
            row[len(row)-1]=2
        tempMap[5][10], tempMap[6][10] = 0, 0
    if ext == "Left":
        for row in tempMap:
            row[0]=2
        tempMap[5][1], tempMap[6][1] = 0, 0
    if ext == "Top":
        tempMap[0][5], tempMap[0][6] = 2,2
        tempMap[1][5], tempMap[1][6] = 0, 0
    if ext == "Bottom":
        tempMap[11][5], tempMap[11][6] = 2,2
        tempMap[10][5], tempMap[10][6] = 0, 0




    return tempMap





def getOpposite(orig):
    ent=""

    match orig:
        case "Left":ent="Right"
        case "Right":ent="Left"
        case "Top":ent="Bottom"
        case "Bottom":ent="Top"
        case "None": ent = "None"
    return ent

def getRandomDir():
    return random.choice(["Right", "Left", "Top", "Bottom"])

lastExit = getRandomDir()


def nextRoom(index, player):
    global lastExit
    newExit = lastExit
    

    if not index in rooms:
        match getOpposite(lastExit):
            case "Right": player.rect.x, player.rect.y = 930 +400, 500
            case "Left": player.rect.x, player.rect.y = 10+400, 500
            case "Top": player.rect.x, player.rect.y = 500+400, 10
            case "Bottom": player.rect.x, player.rect.y = 500+400, 930

        while newExit == getOpposite(lastExit) or newExit==lastExit:

            newExit = getRandomDir()


        rooms[index]={"map":changeEntranceExit(randomMap(),getOpposite(lastExit),newExit)}
        lastExit = newExit
    else:
        match lastExit:
            case "Right": player.rect.x, player.rect.y = 110+400, 500
            case "Left": player.rect.x, player.rect.y = 890+400, 500
            case "Top": player.rect.x, player.rect.y = 500+400, 110
            case "Bottom": player.rect.x, player.rect.y = 500+400, 890



rooms = {
    1:{
        "map":changeEntranceExit(emptyMap,"Empty", lastExit)
    }

}
